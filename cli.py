from abc import ABC, abstractmethod
import click
from random import randint

class Pizza(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ—Ç–æ–º–∫–∏ –ø–∏—Ü—Ü—ã"""
    def __init__(self, size: str):
        self.size = size
        condition = size in ('L', 'XL') # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–∏—Ü—Ü—ã –∫–ª–∏–µ–Ω—Ç–æ–º
        assert condition, 'The available sizes are L and XL'

    @abstractmethod
    def dict(self):
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—É–±–ª–∏–∫—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –ø–∏—Ü—Ü—ã"""
        pass

class Margherita(Pizza):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∏—Ü—Ü—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å–ª–µ–¥—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Pizza"""
    @classmethod
    def dict(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –ø–∏—Ü—Ü—ã –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"""
        return 'tomato_sauce, mozzarella, tomatoes'


    def __eq__(self, other):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è—é—Ç—Å—è –ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∫–ª–∞—Å—Å–∞ Margherita"""
        print('margherita eq')
        return self is other

class Pepperoni(Pizza):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∏—Ü—Ü—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å–ª–µ–¥—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Pizza"""
    @classmethod
    def dict(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –ø–∏—Ü—Ü—ã –ü–µ–ø–µ—Ä–æ–Ω–∏"""
        return 'tomato_sauce, mozzarella, pepperoni'


    def __eq__(self, other):
        print('pepperoni eq')
        return self is other

class Hawaiian(Pizza):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∏—Ü—Ü—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ì–∞–≤–∞–π—Å–∫–∞—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å–ª–µ–¥—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Pizza"""
    @classmethod
    def dict(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –ø–∏—Ü—Ü—ã –ì–∞–≤–∞–π—Å–∫–∞—è"""
        return 'tomato_sauce, mozzarella, chicken, pineapples'


    def __eq__(self, other):
        print('hawaiian eq')
        return self is other


def outer_pattern(arg):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–∞—Ä–∞, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —à–∞–±–ª–æ–Ω, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏"""
    def name_time_of_function(function):
        def wrapped(*args):
            res = function(*args)
            print(arg.format(randint(1, 10)))
            return res
        return wrapped
    return name_time_of_function

@click.group()
def cli():
    pass

@cli.command()
@click.option('--delivery', default=False, is_flag=True)
@click.argument('pizza', nargs=1)
def order(pizza: str, delivery: bool):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    bake({pizza})
    if delivery:
        deliver({pizza})


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    click.echo(f'‚Äî {Margherita.__name__} üßÄ: {Margherita.dict()}')
    click.echo(f'‚Äî {Pepperoni.__name__} üçï: {Pepperoni.dict()}')
    click.echo(f'‚Äî {Hawaiian.__name__} üçç: {Hawaiian.dict()}')
#
#
@outer_pattern('üë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {}—Å!')
def bake(pizza):
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""
    pass

@outer_pattern('üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!')
def deliver(pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    pass

@outer_pattern('üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}—Å!')
def pickup(pizza):
    """–°–∞–º–æ–≤—ã–≤–æ–∑"""
    pass




if __name__ == '__main__':
    cli()
